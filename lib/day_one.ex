defmodule Adventofcode.DayOne do
  @moduledoc"""

  Advent of Code Day 1

  The captcha requires you to review a sequence of digits (your puzzle input)
  and find the sum of all digits that match the next digit in the list. The list
  is circular, so the digit after the last digit is the first digit in the list.

  For example:
    - 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the
           second digit and the third digit (2) matches the fourth digit.
    - 1111 produces 4 because each digit (all 1) matches the next.
    - 1234 produces 0 because no digit matches the next.
    - 91212129 produces 9 because the only digit that matches the next one is
               the last digit, 9.
  """
  @sample_input "572762743879445378236526261778533844111463253844949359244543366
  119531191736381916713262548326248415934216676834743491546681777434377459654616
  786366318635414628935476168779149146623588363654211985162633359265447163318141
  252957125811583993213726837427734236262866697594159593913747442145956827958186
  155326738778684241969264977311443197364451417281233229625472885724345641784927
  536818422448883685424238322282111728424562312757381827642322659336251193125981
  611921932148989492677654174683489351346189646831271943917961653681455488144731
  298576979893226213687447256851833468253332478667347358944933952187814643469517778739298989613
  587962748898268945295996454426574234385624238532475436215654688197999315987547
  534675938323281474393415861252627337371283869615963947281597192927875974268989
  451987882114178546629483584227294713124564377789787497539272514316775335757523
  124474883371569562174519656434544453297583271299666571893328249691414485386819
  796326111993858969659468497254219781377533662524599149136378587831467354697587
  167527657181891755839564769351859859185363184242484254263981582781117517119112
  278188267661779962237188374289727843289257438698852322661277278652678815923956
  438369992442183451844746131298239336594222236854227321865361991539887174555685
  237816733936983569673558751235547977554911817915931564337355915294959842565196
  311878496546332432251181321525497126432738193144338775926446938268615232439469
  986157229511824747731732155275989495531853132599922278799644821217696172186853
  947767784233781824624227882779975239131763264689573422963681783219586261687855
  789774145373686864383481242837897487751638214576411351634956493311444361578366
  479128524831775422248649522718746452745724264586143849179236236275324876253969
  141115827549539449654625766247288969171375997788287699586267886853747496617412
  237418348446437254869258869331183826495814813518449433684848539567598772152527
  662948964964448352643571696423412914127689465897818124934213795755695936783542
  412233637391298136332369965887117919194215745839247431198676222296592117934687
  441632974789524759331632597695783458943678555342944936137675644971373699693151
  92443795512585"

  def slice_string(str) do
    str |> String.slice(1, (str |> String.length()) - 1)
  end
  def check_first_and_last(str) do
    last_index = (str |> String.length()) - 1 # Getting last digit
    first_char = str |> String.at(0)
    last_char = str |> String.at(last_index)
    with true <- first_char == last_char do
      total = first_char |> Integer.parse() |> elem(0)
      {str, total}
    else
      _ -> {str, 0}
    end
  end

  def calculate_sum(a, b, str, total) when a != b do
    calculate_sum({str |> slice_string(), total})
  end

  def calculate_sum(a, b, str, total) when a == b do
    calculate_sum({str |> slice_string(), total + (a |> Integer.parse() |> elem(0))})
  end

  def calculate_sum({"", total}) do # THE END
    total
  end

  def calculate_sum({str, total} = params) do
    calculate_sum(str |> String.at(0), str |> String.at(1), str, total)
  end



  def process(str) do
      str
      |> check_first_and_last()
      |> calculate_sum()
  end

end
